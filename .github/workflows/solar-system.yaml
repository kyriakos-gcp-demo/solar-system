name:  Solar System Workflow

on:
    workflow_dispatch: 
    push:
        branches: 
        - main
        - 'feature/*'

env:
    MONGO_URI: 'mongodb+srv://supercluster.d83jj.mongodb.net/superData'
    MONGO_USERNAME: ${{ vars.MONGO_USERNAME }}
    MONGO_PASSWORD: ${{ secrets.MONGO_PASSWORD }}

jobs:
    unit-testing:
        name: Unit Testing
        services:
          mongodb:
            image: siddharth67/mongo-db:non-prod
            ports:
            - 27017:27017
        env:
            MONGO_URI: 'mongodb://localhost:27017/superData'
            MONGO_USERNAME: non-prod-user
            MONGO_PASSWORD: non-prod-password
        strategy:
            matrix:
                nodejs_version: [18, 20]
                os: [ubuntu-latest]
                exclude:
                - nodejs_version: 18
                  os: macos-latest
        runs-on: ${{ matrix.os }}
        steps:
        - name: Checkout Repository
          uses: actions/checkout@v4

        - name: Setup NodeJS Version - ${{ matrix.nodejs_version}}
          uses: actions/setup-node@v3
          with:
            node-version: ${{ matrix.nodejs_version}}

        - name: Cache NPM Dependencies
          id: cache-npm
          uses: actions/cache@v3
          with:
            path: node_modules
            key: ${{ runner.os }}-node-modules-${{ hashFiles('package-lock.json') }}


        - name: Install Dependencies
          if: steps.cache-npm.outputs.cache-hit != 'true'
          run: npm install
        
        - name: Unit Testing
          id: nodejs-unit-testing-step
          run: npm test

        - name: Archive Test Result
          if: '!cancelled()'
          uses: actions/upload-artifact@v3
          with:
            name: Mocha-Test-Result-${{ matrix.os }}-${{ matrix.nodejs_version }}
            path: test-results.xml

    code-coverage: 
        name: Code Coverage
        runs-on: ubuntu-latest
        container:
          image: node:18
        services:
          mongodb:
            image: siddharth67/mongo-db:non-prod
            options:
              --name mongo
        env:
            MONGO_URI: 'mongodb://mongo:27017/superData'
            MONGO_USERNAME: non-prod-user
            MONGO_PASSWORD: non-prod-password
        steps:
        - name: Checkout Repository
          uses: actions/checkout@v4

        # - name: Setup NodeJS Version - 18
        #   uses: actions/setup-node@v3
        #   with:
        #     node-version: 18

        - name: Cache NPM Dependencies
          uses: actions/cache@v3
          with:
            path: node_modules
            key: ${{ runner.os }}-node-modules-${{ hashFiles('package-lock.json') }}

        - name: Install Dependencies
          run: npm install
        
        - name: Check Code Coverage
          continue-on-error: true
          run: npm run coverage

        - name: Archive Test Result
          uses: actions/upload-artifact@v3
          with:
            name: Code-Coverage-Result
            path: coverage
            retention-days: 5 

    docker:
      name: Containerization
      needs: [unit-testing, code-coverage]
      permissions: 
        packages: write
      runs-on: ubuntu-latest
      steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Dockerhub Login
        uses: docker/login-action@v2.2.0
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: GHCR Login
        uses: docker/login-action@v2.2.0
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Docker Build For Testing
        uses: docker/build-push-action@v4
        with:
          context: .
          push: false
          tags: ${{ vars.DOCKERHUB_USERNAME }}/solar-system:${{ github.sha }}

      - name: Docker Image Testing
        run: |
          docker images
          docker run --name solar-system-app -d \
            -p 3000:3000 \
            -e MONGO_URI=$MONGO_URI \
            -e MONGO_USERNAME=$MONGO_USERNAME \
            -e MONGO_PASSWORD=$MONGO_PASSWORD \
            ${{ vars.DOCKERHUB_USERNAME }}/solar-system:${{ github.sha }}

            export IP=$(docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' solar-system-app)
            echo $IP

            echo Testing Image URL using wget
            wget -q -O - 127.0.0.1:3000/live | grep live

      - name: Multiple Container Registry Push
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: |
            ${{ vars.DOCKERHUB_USERNAME }}/solar-system:${{ github.sha }}
            ghcr.io/${{ github.repository_owner }}/solar-system:${{ github.sha }}


    dev-deploy:
      needs: [docker]
      runs-on: ubuntu-latest
      steps:
      - name: Checkout Repo
        uses: actions/checkout@v4

      - name: Install kubectl CLI
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.26.0'

      - name: Set Kubeconfig
        uses: azure/k8s-set-context@v3
        with:
          methods: kubeconfig
          kubeconfig: ${{ secrets.KUBECONFIG }} # suppose we have defined such a secret with a valid kubeconfig file in it
  
      - name: Fetch Kubernetes Cluster Details
        run: |
          kubectl version --short
          echo ---------------------------------
          kubectl get nodes

      - name: Save Nginx Ingress Controller IP as a GITHUG Environment Variable    
        run: |
          echo "INGRESS_IP=$(kubectl -n ingress-nginx get service ingress-nginx-controller -o jsonpath='{.status.loadBalancer.ingress[0].ip}')" >> "$GITHUB_ENV" 

      - name: Replace Tokens in Manifest files
        uses: cschleiden/replace-tokens@v1          
        with:
          tokenPrefix: '${'
          tokenSuffix: '}'
          files: '["kubernetes/development/*.yaml"]'
        env:
          NAMESPACE: ${{ vars.NAMESPACE }}
          REPLICAS: ${{ vars.REPLICAS }}
          IMAGE: ${{ vars.DOCKERHUB_USERNAME }}/solar-system:${{ github.sha }}
          INGRESS_IP: ${{ env.INGRESS_IP}}

      - name: Check files
        run: |
          cat kubernetes/development/*.yaml

      - name: Create MongoDB Secret
        run: |
          kubectl -n ${{ vars.NAMESPACE }} create secret generic mongo-db-creds \
            --from-literal=MONGO_URI=${{ env.MONGO_URI }} \
            --from-literal=MONGO_USERNAME=${{ env.MONGO_USERNAME }} \
            --from-literal=MONGO_PASSWORD=${{ env.MONGO_PASSWORD }} \
            --save-config \
            --dry-run=client \
            -o yaml | kubectl apply -f -

      - name: Deploy To Dev Env
        run: kubectl apply -f kubernetes/development/